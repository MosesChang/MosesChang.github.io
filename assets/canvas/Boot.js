// -- user code here --
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/* --- start generated code --- */
// Generated by Phaser Editor v1.4.1 (Phaser v2.6.2)
/**
 * Boot.
 */
var Boot = (function (_super) {
    __extends(Boot, _super);
    function Boot() {
        var _this = _super.call(this) || this;
        _this.afterConstructor();
        return _this;
    }
    Boot.prototype.init = function () {
        this.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;
        this.scale.pageAlignHorizontally = true;
        this.scale.pageAlignVertically = true;
        this.afterInit();
    };
    Boot.prototype.preload = function () {
        this.afterPreload();
    };
    ;
    Boot.prototype.create = function () {
        this.afterCreate();
    };
    /* state-methods-begin */
    // -- user code here --
    Boot.prototype.afterConstructor = function () {
        //console.log("Boot::afterConstructor") ;
    };
    Boot.prototype.afterInit = function () {
        //console.log("Boot::afterInit") ;
    };
    Boot.prototype.afterPreload = function () {
        //console.log("Boot::afterPreload") ;
        /*
        for( var i=0 ; i<FULLSYMBOL.length ; i++  ){
            var tmpString = "" ;
            tmpString += FULLSYMBOL[i].name + " " ;
            tmpString += FULLSYMBOL[i].value + " " ;
            tmpString += FULLSYMBOL[i].keyName + " " ;
            tmpString += FULLSYMBOL[i].belong ;
            console.log(tmpString) ;
        }
        */
    };
    Boot.prototype.afterCreate = function () {
        //console.log("Boot::afterCreate") ;
        this.game.state.start("Level");
    };
    return Boot;
}(Phaser.State));
/* --- end generated code --- */
// -- user code here --
